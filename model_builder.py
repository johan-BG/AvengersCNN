from torch import nn 
from functools import reduce
from operator import mul
import math
class CNNmodel(nn.Module):
    def __init__(self,
                inunits:int,
               #hidden:int,
               outunits:int,
                kernel:int,
               size):
        super().__init__()
        padding=(kernel-1)//2
        self.conv1=nn.Sequential(
            nn.Conv2d(in_channels=inunits,
                    out_channels=128,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.Conv2d(in_channels=128,
                    out_channels=128,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.MaxPool2d(kernel_size=2)
        )
        self.conv2=nn.Sequential(
            nn.Conv2d(in_channels=128,
                    out_channels=64,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Conv2d(in_channels=64,
                    out_channels=64,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.MaxPool2d(kernel_size=2)
        )
        self.conv3=nn.Sequential(
            nn.Conv2d(in_channels=64,
                    out_channels=32,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Conv2d(in_channels=32,
                    out_channels=32,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.MaxPool2d(kernel_size=2)
        )
        self.conv4=nn.Sequential(
            nn.Conv2d(in_channels=32,
                    out_channels=16,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Conv2d(in_channels=16,
                    out_channels=16,
                    kernel_size=kernel,
                    padding=padding,
                    stride=1),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.MaxPool2d(kernel_size=2)
        )
        h,w=size[1],size[2]
        c_in=math.floor(h/16)*math.floor(w/16)*16
        self.classifier=nn.Sequential(
            nn.Flatten(),
            nn.Linear(in_features=c_in,
                     out_features=128),
            nn.ReLU(),
            nn.Dropout(p=0.5),
            nn.Linear(in_features=128,
                     out_features=outunits)
        )
    def forward(self,x):
        x=self.conv1(x)
        x=self.conv2(x)
        x=self.conv3(x)
        x=self.conv4(x)
        x=self.classifier(x)
        return x
